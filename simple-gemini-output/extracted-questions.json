[
  {
    "id": "Q1",
    "text": "Problem 1 For each example, indicate whether $f = o(g)$ (little-oh), $f = (g)$ (little-omega), or $f = (g)$ (big-Theta). No justification is necessary. (a) $f(n) = 3(_3 n)^3$, $g(n) = n^{3}$ (b) $f(n) = n$, $g(n) = n^3$ (c) $f(n) = 5n$, $g(n) = 5n!$ (that’s factorial) (d) $f(n) = 5 _i=0^n 41^i$, $g(n) = n^5$ (e) $f(n) = _10 n$, $g(n) = _5 n + _2 n$",
    "rawLatex": "\\section*{Problem 1}\nFor each example, indicate whether $f = o(g)$ (little-oh), $f = \\omega(g)$ (little-omega), or $f = \\Theta(g)$ (big-Theta). No justification is necessary.\n\n(a) $f(n) = 3(\\log_3 n)^3$, $g(n) = n^{\\frac{1}{3}}$\n(b) $f(n) = n$, $g(n) = n^3$\n(c) $f(n) = 5n$, $g(n) = 5n!$ (that’s factorial)\n(d) $f(n) = 5 \\sum_{i=0}^n 41^i$, $g(n) = n^5$\n(e) $f(n) = \\log_{10} n$, $g(n) = \\log_5 n + \\log_2 n$",
    "points": null
  },
  {
    "id": "Q2",
    "text": "Problem 2 Give a formal proof of the following statement: If $f(n) 0$ for all $n $, $g(n) 0$ for all $n $, $f(n) = O(g(n))$, and $g(n)$ is unbounded (meaning $_n g(n) = $) then $_2 f(n) = O( g(n))$. Use the formal definition of big-Oh in your answer. In your proof, you can use the fact that the value of $_2 n$ increases as $n$ increases. Note that a similar statement with exponential functions is not true: If $f(n) = 3^n$ and $g(n) = n$, then $f(n) = O(g(n))$, but $2^3^n$ is not $O(2^n)$.",
    "rawLatex": "\\section*{Problem 2}\nGive a formal proof of the following statement: If $f(n) \\ge 0$ for all $n \\in \\mathbb{N}$, $g(n) \\ge 0$ for all $n \\in \\mathbb{N}$, $f(n) = O(g(n))$, and $g(n)$ is unbounded (meaning $\\lim_{n\\to\\infty} g(n) = \\infty$) then $\\log_2 f(n) = O(\\log g(n))$.\nUse the formal definition of big-Oh in your answer. In your proof, you can use the fact that the value of $\\log_2 n$ increases as $n$ increases.\nNote that a similar statement with exponential functions is not true: If $f(n) = 3^n$ and $g(n) = n$, then $f(n) = O(g(n))$, but $2^{3^n}$ is not $O(2^n)$.",
    "points": null
  },
  {
    "id": "Q3",
    "text": "Problem 3 For each of the following recurrences, determine whether Our Master Theorem (on the last page of this HW) can be applied to the recurrence. If it can, use it to give the solution to the recurrence in $$ notation; no need to give any details. If not, write “Our Master Theorem does not apply.” (a) $T(n) = 4T(n/5) + n^3$ (b) $T(n) = 10T(n/3) + 5n^2$ (c) $T(n) = n^2 T(n/5) + 2$",
    "rawLatex": "\\section*{Problem 3}\nFor each of the following recurrences, determine whether Our Master Theorem (on the last page of this HW) can be applied to the recurrence. If it can, use it to give the solution to the recurrence in $\\Theta$ notation; no need to give any details. If not, write “Our Master Theorem does not apply.”\n\n(a) $T(n) = 4T(n/5) + n^3$\n(b) $T(n) = 10T(n/3) + 5n^2$\n(c) $T(n) = n^2 T(n/5) + 2$",
    "points": null
  },
  {
    "id": "Q4",
    "text": "Problem 4 Our Master Theorem can be applied to a recurrence of the form $T(n) = aT(n/b) + n^d$, where $a$, $b$, $d$ are constants with $a > 0$, $b > 1$, $d > 0$. Consider instead a recurrence of the form $T_new(n) = aT_new(n/b) + _d n$ where $a > 0$, $b > 1$, $d > 1$ (and $T(1) = 1$). For each of the following, state whether the given property of $T_new$ is true. If so, explain why it is true. If not, explain why it is not true. (Even if you know the version of the Master Theorem in the textbook, don’t use it in your explanation.) (a) $T_new(n) = O(n n)$ if $_b a = 1$ (b) $T_new(n) = (n^_b a)$",
    "rawLatex": "\\section*{Problem 4}\nOur Master Theorem can be applied to a recurrence of the form $T(n) = aT(n/b) + n^d$, where $a$, $b$, $d$ are constants with $a > 0$, $b > 1$, $d > 0$. Consider instead a recurrence of the form $T_{new}(n) = aT_{new}(n/b) + \\log_d n$ where $a > 0$, $b > 1$, $d > 1$ (and $T(1) = 1$).\n\nFor each of the following, state whether the given property of $T_{new}$ is true. If so, explain why it is true. If not, explain why it is not true. (Even if you know the version of the Master Theorem in the textbook, don’t use it in your explanation.)\n\n(a) $T_{new}(n) = O(n \\log n)$ if $\\log_b a = 1$\n(b) $T_{new}(n) = \\Omega(n^{\\log_b a})$",
    "points": null
  },
  {
    "id": "Q5",
    "text": "Problem 5 Consider the recurrence $T(n) = 4T(n/3) + 2n$ for $n > 1$, and $T(1) = 2$. (a) Compute the value of $T(9)$, using the recurrence. Show your work. (b) Use a recursion tree to solve the recurrence and get a closed-form expression for $T(n)$, when $n$ is a power of 3. (Check that your expression is correct by plugging in $n = 9$ and comparing with your answer to (a).) (c) Suppose that the base case is $T(3) = 5$, instead of $T(1) = 2$. What is the solution to the recurrence in this case, for $n 3$?",
    "rawLatex": "\\section*{Problem 5}\nConsider the recurrence $T(n) = 4T(n/3) + 2n$ for $n > 1$, and $T(1) = 2$.\n\n(a) Compute the value of $T(9)$, using the recurrence. Show your work.\n(b) Use a recursion tree to solve the recurrence and get a closed-form expression for $T(n)$, when $n$ is a power of 3. (Check that your expression is correct by plugging in $n = 9$ and comparing with your answer to (a).)\n(c) Suppose that the base case is $T(3) = 5$, instead of $T(1) = 2$. What is the solution to the recurrence in this case, for $n \\ge 3$?",
    "points": null
  },
  {
    "id": "Q6",
    "text": "Problem 6 Consider a variation of mergesort that works as follows: If the array has size 1, return. Otherwise, divide the array into thirds, rather than in half. Recursively sort each third using this variation of mergesort. Then merge the first (leftmost) third with the middle third. Finally, merge the first two thirds with the last third. (a) Write a recurrence for the running time of this variation of mergesort. It should be similar to the recurrence for ordinary mergesort. Assume $n$ is a power of 3. (b) Apply Our Master Theorem to the recurrence to get the running time of the algorithm, in theta notation. Show your work.",
    "rawLatex": "\\section*{Problem 6}\nConsider a variation of mergesort that works as follows: If the array has size 1, return. Otherwise, divide the array into thirds, rather than in half. Recursively sort each third using this variation of mergesort. Then merge the first (leftmost) third with the middle third. Finally, merge the first two thirds with the last third.\n\n(a) Write a recurrence for the running time of this variation of mergesort. It should be similar to the recurrence for ordinary mergesort. Assume $n$ is a power of 3.\n(b) Apply Our Master Theorem to the recurrence to get the running time of the algorithm, in theta notation. Show your work.",
    "points": null
  },
  {
    "id": "Q7",
    "text": "Problem 7 Consider the following recursive sorting algorithm. Assume $n$ is a power of 3. (Note: This is not a version of mergesort. No merges are performed.) If the array has only one element, return. Recursively sort the first 2/3 of the elements in the array. Recursively sort the second 2/3 of the elements in the array. Recursively sort the first 2/3 of the elements in the array again. (Note: Even if you can’t figure out part (a) below, you can still answer (b) and (c).) (a) Prove that the algorithm is correct by showing that the array will be sorted after the three recursive calls are performed, assuming the three recursive calls correctly sort their (sub)arrays. Note that the middle third of the array is included in each of the 3 recursive calls. (b) Write a recurrence expressing the running time of the algorithm. (c) Apply Our Master Theorem to your recurrence. What is the running time of the algorithm, in theta notation? Theorem 0.1 (Our Master Theorem) Let $a, b, d, n_0$ be constants such that $a > 0$, $b > 1$, $d 0$ and $n_0 > 0$. Let $T(n) = aT(n/b) + (n^d)$ for when $n n_0$, and $T(n) = (1)$ when $0 n < n_0$. Then, \\[ T(n) = (n^d n) & d = _b a (n^_b a) & d < _b a (n^d) & d > _b a \\] We assume here that $T(n)$ is a function defined on the natural numbers. We use $aT(n/b)$ to mean $a'T( n/b ) + a''T( n/b )$ where $a', a'' > 0$ such that $a' + a'' = a$.",
    "rawLatex": "\\section*{Problem 7}\nConsider the following recursive sorting algorithm. Assume $n$ is a power of 3. (Note: This is not a version of mergesort. No merges are performed.)\n\\begin{itemize}\n    \\item If the array has only one element, return.\n    \\item Recursively sort the first 2/3 of the elements in the array.\n    \\item Recursively sort the second 2/3 of the elements in the array.\n    \\item Recursively sort the first 2/3 of the elements in the array again.\n\\end{itemize}\n(Note: Even if you can’t figure out part (a) below, you can still answer (b) and (c).)\n\n(a) Prove that the algorithm is correct by showing that the array will be sorted after the three recursive calls are performed, assuming the three recursive calls correctly sort their (sub)arrays. Note that the middle third of the array is included in each of the 3 recursive calls.\n(b) Write a recurrence expressing the running time of the algorithm.\n(c) Apply Our Master Theorem to your recurrence. What is the running time of the algorithm, in theta notation?\n\n\\vspace{1cm}\n\\textbf{Theorem 0.1 (Our Master Theorem)} Let $a, b, d, n_0$ be constants such that $a > 0$, $b > 1$, $d \\ge 0$ and $n_0 > 0$.\nLet $T(n) = aT(n/b) + \\Theta(n^d)$ for when $n \\ge n_0$, and $T(n) = \\Theta(1)$ when $0 \\le n < n_0$. Then,\n\\[\nT(n) = \\begin{cases}\n\\Theta(n^d \\log n) & \\text{if } d = \\log_b a \\\\\n\\Theta(n^{\\log_b a}) & \\text{if } d < \\log_b a \\\\\n\\Theta(n^d) & \\text{if } d > \\log_b a\n\\end{cases}\n\\]\nWe assume here that $T(n)$ is a function defined on the natural numbers. We use $aT(n/b)$ to mean $a'T(\\lfloor n/b \\rfloor) + a''T(\\lceil n/b \\rceil)$ where $a', a'' > 0$ such that $a' + a'' = a$.",
    "points": null
  }
]